!!!
Чтобы проверить два числа на точное равенство, используйте тройной знак
равенства (===) — это оператор «равно». Будьте осторожны, не путайте ===
с одиночным знаком равенства (=), поскольку === означает «равны ли эти
два числа?», а = означает «положить значение справа в переменную слева».
Иначе говоря, === задает вопрос, а = присваивает переменной значение.
_____________________________________________________________________________________

Двойной знак равенства
Еще немного запутаю вас: в JavaScript есть еще один оператор сравнения 
(двойное равно, ==), который означает «практически равно».
Используйте его для проверки двух значений на соответствие друг другу,
даже если одно из них строка, а другое — число. Все значения принадлежат 
к тому или иному типу, так что число 5 отличается от строки «5»,
хоть они и выглядят похоже. Если сравнить их с помощью ===, JavaScript
ответит, что значения не равны. Однако при сравнении через == они окажутся равными:

Короче, == сравнивает по типу данных: из математики: 0 - это false, 1 - это true
допустим:
0 == false;
true
"false" == false;
false
______________________________________________________________________________________

Null и undefined
Пока вы будете нечасто использовать undefined и null. Вы получите
undefined, если создадите переменную и не присвоите ей значения, —
JavaScript всегда возвращает undefined, когда значение не определено.
Однако специально undefined обычно ничему не присваивают; если вам
захочется обозначить, что в переменной «пусто», используйте для этого null.
Иначе говоря, null нужен, чтобы явно показать отсутствие значения, и порой 
это бывает полезно. Например, есть переменная, обозначающая ваш любимый овощ. 
Если вы терпеть не можете все без исключения овощи, имеет смысл дать переменной 
«любимый овощ» значение null.
Этим вы явно покажете любому, кто увидит ваш код, что у вас нет
любимого овоща. Однако если в переменной будет undefined, кто-нибудь может подумать,
что вы просто еще не приписали ей значения.
_______________________________________________________________________________________
Массивы
1)Запись
maniacs[maniacs.length - 1];
вернёт последний элемент массива, каким бы не была его длина

2) 
IN 
var animals = [];  с помощью .push() добавляем элемент массива
animals.push("Кот");
animals.push("Пес");
animals.push("Лама");
animals;
animals.unshift("Медведь"); с помощью .unshift() добавляем элемент в начало массива
OUT
['Медведь', 'Кот', 'Пес', 'Лама']

Как и push, метод unshift при каждом вызове
задает новую длину массива.

3) метод .pop() удаляет последний элемент массива

Чтобы удалить из массива первый элемент, вернув его значение,
используйте .shift():

4)Случайные числа можно генерировать с помощью специального метода
Math.random(), который при каждом вызове возвращает случайное
число от 0 до 1:

Важно помнить, что Math.random() всегда возвращает число
меньше 1, то есть никогда не возвращает собственно 1.
Если вам нужно число побольше, просто умножьте полученное из метода Math.random() 
значение на подходящий коэффициент. Например,
если нужно случайное число от 0 до 10, умножьте Math.random() на 10:

Округление с помощью Math.floor()
И все же эти случайные значения нельзя использовать как индексы
в массиве, поскольку индексы должны быть целыми числами, а не десятичными 
дробями. Чтобы исправить этот недостаток, нужен метод
Math.floor(), округляющий число до ближайшего снизу целого значения 
(по сути, он просто отбрасывает все знаки после запятой).


