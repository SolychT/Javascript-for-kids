//Создаем нашу первую функцию
var ourFunction = function(){
    console.log("Hello World"); // это тело функции
}
ourFunction(); //вызов функции

var sayHelloTo = function(name) { 
    console.log("Привет, " + name);
}
sayHelloTo("Ник"); //Можем изменять аргумент функции
sayHelloTo("Анна");

//возвращаемся в начало книги и рисуем котиков
var drawCats = function(howManyTimes){
    for ( var i = 0; i < howManyTimes; i++){
    console.log(i + "=^.^=");
    }
}
drawCats(5);

//можно задавать несколько аргументов функциям
var multiplyDraw = function(howManyTimes, whatToDraw){
    for ( var i = 0; i < howManyTimes; i++){
        console.log(i + " " + whatToDraw);
}
}
multiplyDraw(2, "^_^"); // здесь задаем сколько раз и что мы будем рисовать

//не будем пользоваться console.log а будем возращать значение нашей функции
var double = function(number){
    return number*2; 
}
double(3);

// Упрощаем код с помощью функций
// В третьей главе мы использовали методы Math.random и Math.floor,
// чтобы выбирать случайные слова из массивов и генерировать дразнилки.
//  В этом разделе мы перепишем генератор дразнилок, упростив его
// с помощью функций.
var pickRandomWord = function(words){
    return words[Math.floor(Math.random()*words.length)]; 
}
var randomWords = ["Планета", "Червяк", "Цветок", "Компьютер"];
console.log(pickRandomWord(randomWords)); 

// А вот и дразнилка
var generateRandomInsults = function(){ //обернули весь код в еще одну функцию
    var randomBodyParts = ["глаз", "нос", "череп"];
    var randomAdjectives = ["вонючая", "унылая", "дурацкая"];
    var randomWords = ["муха", "выдра", "дубина", "мартышка", "крыса"];
    //Соединяем случайные строки в предложение с помощью функций
    var randomString = "У тебя " + pickRandomWord(randomBodyParts) +
    ", словно " + pickRandomWord(randomAdjectives) + " " +
    pickRandomWord(randomWords) + " !!!";
    return randomString; //если не будем возвращать нашу переменную в консоли отобразиться undefined
}
console.log(generateRandomInsults()); //и тут мы можем вывести ее трижды)
console.log(generateRandomInsults());
console.log(generateRandomInsults());
// __________________________________________________________________________
// Как только JavaScript, выполняя код
// функции, встречает оператор return,
// он завершает функцию, даже если после
// return еще остался какой-нибудь код.
// Оператор return часто используют,
// чтобы выйти из функции в самом начале,
// если какие-нибудь из переданных аргументов имеют некорректные значения —
// то есть если с такими аргументами
// функция не сможет правильно работать.
// Например, следующая функция возвращает строку с информацией о пятой
// букве вашего имени. Если в имени, переданном в аргументе name, меньше пяти
// букв, будет выполнен return, чтобы сразу же выйти из функции. При
// этом оператор return в конце функции (тот, что возвращает сообщение
// о пятой букве) так и не будет выполнен.

var fifthLetter = function (name) {
     if (name.length < 5) {
    return;
     }
     return "Пятая буква вашего имени: " + name[4] + ".";
    };
console.log(fifthLetter("Антон"));
console.log(fifthLetter("Ник")); // меньше пяти имя, поэтому будет undefined
// Когда мы вызвали fifthLetter для имени Ник, функция распознала,
// что имя недостаточно длинное, и сразу завершилась, 
// выполнив оператор return в строке . Поскольку никакого значения после
// этого return не указано, функция вернула undefined.
// __________________________________________________________________________
// Многократное использование return
// вместо конструкции if... else
// Можно многократно использовать return внутри разных
// конструкций if, чтобы возвращать из функции разные 
// значения в зависимости от входных данных. Предположим, вы
// пишете игру, в которой игроки награждаются медалями
// согласно набранным очкам. Счету меньше трех очков 
// соответствует бронзовая медаль, счету от трех до шести — серебряная,
// а счету от семи и выше — золотая.

var medalForScore = function(score){
    if (score < 3){
        return "Бронзовая";
    } if  (score < 7){
        return "Серебрянная";
    } else {
        return "Золотая";
    }
}
console.log(medalForScore(7));
// Хотя мы проверяем здесь несколько условий, необходимости 
// использовать цепочку конструкций if... else нет. Мы используем if... else,
// когда хотим убедиться, что будет выбран лишь один из вариантов.
// Однако если в каждом варианте выполняется return, это также 
// гарантирует однозначный выбор (поскольку выйти из функции можно лишь
// один раз).

// _____________________________________________________________________________
// СОКРАЩЕННАЯ ЗАПИСЬ ПРИ СОЗДАНИИ ФУНКЦИЙ
// Есть длинный и короткий способы записи функций. Я использую длинную
// запись, поскольку она наглядно демонстрирует, что функция хранится
// в переменной. Тем не менее вам стоит знать и о короткой записи, поскольку
// ее используют многие JavaScript-разработчики. Возможно, и вы сами,
// достаточно поработав с функциями, предпочтете короткую запись.
// Вот пример длинной записи:
var double = function(number){
    return number*2;
}
console.log(double(3));

// Вот пример короткой записи
function double(number){
    return number*2;
}
console.log(double(3));

// Как видите, при длинной записи мы явно создаем переменную и 
// сохраняем в ней функцию, так что имя double записывается прежде ключевого
// слова function. Напротив, при короткой записи сначала идет ключевое
// слово function, а затем название функции. В этом случае JavaScript 
// создает переменную double неявным образом.
// На техническом сленге длинная запись называется функциональным
// выражением, а короткая — объявлением функции. 

